pipeline {
    agent any
    tools {
        maven 'Maven3'
    }
    options {
    //     // Append time stamp to the console output.
    //     timestamps()
    //     timeout(time: 1, unit: 'HOURS')
    //     // Do not automatically checkout the SCM on every stage. We stash what
    //     // we need to save time.
        skipDefaultCheckout()
    //     // Discard old builds after 10 days or 30 builds count.
    //     buildDiscarder(logRotator(daysToKeepStr: '10', numToKeepStr: '10'))
    //     //To avoid concurrent builds to avoid multiple checkouts
    //     disableConcurrentBuilds()
    }
    stages {

        stage('Start') {
            steps {
                checkout scm
            }
        }

        stage('Build') {
            steps {
                bat "mvn install -DskipTests"
            }
        }

        stage('Unit Testing') {
            steps {
                bat "mvn test"
            }
        }

        stage('Sonar Analysis') {
            steps {
                withSonarQubeEnv("Test_Sonar") {
                    bat "mvn sonar:sonar"
                }
            }
        }

        stage('Upload to Artifactory') {
            steps {
                rtMavenDeployer(
                    id: 'deployer',
                    serverId: '123456789@artifactory',
                    releaseRepo: 'CI-Automation-JAVA',
                    snapshotRepo: 'CI-Automation-JAVA'
                )
                rtMavenRun(
                    pom: 'pom.xml',
                    goals: 'clean install',
                    deployerId: 'deployer',
                )
                rtPublishBuildInfo(
                    serverId: '123456789@artifactory',
                )
            }
        }

        stage('Docker Image') {
            steps {
                bat '/bin/docker build -t dtr.nagarro.com:443/rupeshkumar01-application:${BUILD_NUMBER} -f Dockerfile .'
            }
        }

        stage('Push To DTR') {
            steps {
                bat '/bin/docker push dtr.nagarro.com:443/rupeshkumar01-application:${BUILD_NUMBER}'
                }
        }
        stage('Stop Running Container') {
            steps {
                bat '''
                ContainerID=$(docker ps | grep 6100 | cut -d " " -f 1)
                if [ $ContainerID ]
                then 
                  docker stop  $ContainerID
                  docker rm -f $ContainerID
                fi
            '''
                }
        }
            
        stage('Docker deployment') {
            steps {
                bat 'docker run --name rupeshkumar01-application -d -p 6100:8080 dtr.nagarro.com:443/rupeshkumar01-application:${BUILD_NUMBER}'
            }
        }

        stage('Helm Charts Deployment') {
            steps {
                bat '''
                 Kubectl create ns rupeshkumar01-java-${BUILD_NUMBER}
                 helm install devops-helm-java mychart-java --set image=my-chart --set nodePort=30158 --set image=dtr.nagarro.com:443:rupeshkumar01-application --set container=rupeshkumar01-application
            '''
            }
        }

    }
}